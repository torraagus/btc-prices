{"version":3,"sources":["logo.svg","models/Currency.js","components/Currencies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Currency","last","buy","sell","symbol","this","Currencies","props","state","currencies","index","data","handleClick","bind","setState","fetch","then","response","json","Object","keys","values","console","log","i","className","map","currency","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,iLCA9BC,G,MACT,WAAYC,EAAMC,EAAKC,EAAMC,GAAS,oBACpCC,KAAKJ,KAAOA,EACZI,KAAKH,IAAMA,EACXG,KAAKF,KAAOA,EACZE,KAAKD,OAASA,ICCCE,E,YAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,WAAY,GACZC,OAAQ,EACRC,KAAM,CAACX,IAGX,EAAKY,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,yEAWPH,GACRL,KAAKS,UAAS,SAAAN,GAAK,MAAK,CACtBE,MAAOA,Q,2CAIS,IAAD,OACjBK,MAtBI,kCAuBHC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACC,GACH,EAAKH,SAAS,CAACL,WAAYU,OAAOC,KAAKH,KACvC,EAAKH,SAAS,CAACH,KAAMQ,OAAOE,OAAOJ,KACnCK,QAAQC,IAAI,EAAKf,Y,+BAIf,IAAD,OACDgB,EAAInB,KAAKG,MAAME,MACnB,OACI,oCACI,yBAAKe,UAAU,aACVpB,KAAKG,MAAMC,WAAWiB,KAAI,SAACC,EAAUH,GAAX,OACvB,4BAAQC,UAAU,aAAaG,IAAG,UAAKD,GAAYE,QAAS,WAAO,EAAKjB,YAAYY,KAC/EG,OAIb,yBAAKF,UAAU,aACVD,GAAK,GAAK,uBAAGC,UAAU,aAAb,kBAAmC,2BAAIpB,KAAKG,MAAMG,KAAKa,GAAGvB,KAAvB,IAA8BI,KAAKG,MAAMG,KAAKa,GAAGpB,OAAjD,OAEjDoB,GAAK,GACN,yBAAKC,UAAU,aACX,uCAAY,2BAAIpB,KAAKG,MAAMG,KAAKa,GAAGvB,MAAnC,MACA,0BAAMwB,UAAU,QAAhB,QAA4B,2BAAIpB,KAAKG,MAAMG,KAAKa,GAAGtB,KAAnD,KACA,0BAAMuB,UAAU,QAAhB,SAA6B,2BAAIpB,KAAKG,MAAMG,KAAKa,GAAGrB,MAApD,KACA,0BAAMsB,UAAU,QAAhB,WAA+B,2BAAIpB,KAAKG,MAAMG,KAAKa,GAAGpB,e,GAlDlC0B,aCYzBC,MAXf,WAEE,OACE,6BACE,wBAAIN,UAAU,aAAd,kBACA,wBAAIA,UAAU,QAAd,uBACA,kBAAC,EAAD,QCDcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.e9774839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export class Currency {\r\n    constructor(last, buy, sell, symbol) {\r\n      this.last = last;\r\n      this.buy = buy;\r\n      this.sell = sell;\r\n      this.symbol = symbol;\r\n    }\r\n  }","import React, { Component } from 'react'\r\nimport '../styles/Currencies.scss';\r\nimport { Currency } from '../models/Currency';\r\n\r\nconst URL = 'https://blockchain.info/ticker';\r\n\r\nexport default class Currencies extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currencies: [], // Arreglo de las denominaciones de las monedas\r\n            index: -1, // Es el indice de la moneda seleccionada\r\n            data: [Currency] // Arreglo de objetos moneda\r\n        }\r\n        // Este enlace es necesario para hacer que `this` funcione en el callback\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(index) {\r\n        this.setState(state => ({\r\n          index: index\r\n        }));\r\n    }\r\n\r\n    componentWillMount() {\r\n        fetch(URL)\r\n        .then((response) => {\r\n            return response.json()\r\n        })\r\n        .then((response) => {\r\n            this.setState({currencies: Object.keys(response)})\r\n            this.setState({data: Object.values(response)})\r\n            console.log(this.state);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let i = this.state.index;\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    {this.state.currencies.map((currency, i) => (\r\n                        <button className=\"currencies\" key={`${currency}`} onClick={() => {this.handleClick(i)}}>\r\n                            {currency}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n                <div className=\"container\">\r\n                    {i > -1 && <p className=\"mt-3 mb-0\">1BTC(â‚¿) = <b>{this.state.data[i].last}({this.state.data[i].symbol})</b></p>}\r\n                </div>                \r\n                {i > -1 &&\r\n                <div className=\"container\">\r\n                    <span>Last: <b>{this.state.data[i].last}</b>, </span>      \r\n                    <span className=\"ml-2\">Buy: <b>{this.state.data[i].buy}</b>,</span>      \r\n                    <span className=\"ml-2\">Sell: <b>{this.state.data[i].sell}</b>,</span>      \r\n                    <span className=\"ml-2\">Symbol: <b>{this.state.data[i].symbol}</b></span>      \r\n                </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Currencies from './components/Currencies'\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"mt-5 mb-0\">Bitcoin prices</h1>\r\n      <h5 className=\"mt-0\">Select one currency</h5>\r\n      <Currencies />\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}